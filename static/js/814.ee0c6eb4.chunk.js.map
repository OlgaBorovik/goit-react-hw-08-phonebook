{"version":3,"file":"static/js/814.ee0c6eb4.chunk.js","mappings":"wPAgBA,EAXgB,SAAC,GAAe,IAAdA,EAAa,EAAbA,QACRC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,UAAC,KAAD,YACI,UAAC,KAAD,WAAOF,EAAQG,KAAf,KAAuBH,EAAQI,WAC/B,SAAC,KAAD,CAAQC,KAAK,SAASC,QAJT,kBAAML,GAASM,EAAAA,EAAAA,IAAcP,EAAQQ,IAArC,EAIb,sBAGX,ECZYC,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAMtBC,EAAe,SAAAH,GAAK,OAAIA,EAAMI,MAAV,ECsBjC,MArBA,WACI,IAAMH,GAAWI,EAAAA,EAAAA,IAAYN,GACvBO,GAAeD,EAAAA,EAAAA,IAAYF,GAE3BI,EAAkBN,EAASG,QAAO,SAACd,GAAD,OAAaA,EAAQG,KAAKe,cAAcC,SAASH,EAAaE,cAA9D,IAGxC,OAFAE,QAAQC,IAAIJ,IAGJ,SAAC,KAAD,UACKA,EAAgBK,KAAI,SAAAtB,GAAO,OAC5B,SAAC,KAAD,WACI,SAAC,EAAD,CAASA,QAASA,KADPA,EAAQQ,GADK,KAS3C,E,6BCnBYe,EAAS,WAClB,IAAMtB,GAAWC,EAAAA,EAAAA,MAOjB,OAAO,UAAC,KAAD,oCAEH,SAAC,KAAD,CACIG,KAAK,OACLF,KAAK,SACLqB,SAVoB,SAACC,GACzBxB,GAASyB,EAAAA,EAAAA,GAAUD,EAAME,OAAOC,OACnC,MAWJ,ECoCD,EApDqB,WACnB,IAAM3B,GAAWC,EAAAA,EAAAA,MACXS,GAAWI,EAAAA,EAAAA,IAAYN,GAsB3B,OACE,UAAC,KAAD,CAAaoB,SApBI,SAACJ,GACpBA,EAAMK,iBACN,IAAMC,EAAON,EAAME,OACbK,EAAa,CACjB7B,KAAM4B,EAAKE,SAAS9B,KAAKyB,MACzBxB,OAAQ2B,EAAKE,SAAS7B,OAAOwB,OAG/B,GAAIjB,EAASuB,MAAK,SAAAlC,GAAO,OAAIA,EAAQG,OAAS6B,EAAW7B,IAAhC,IAGvB,OAFAgC,MAAM,GAAD,OAAIH,EAAW7B,KAAf,iCACL4B,EAAKK,QAILnC,GAASoC,EAAAA,EAAAA,IAAWL,IACpBD,EAAKK,OAEN,EAGC,WACE,UAAC,KAAD,mBAEE,SAAC,KAAD,CACE/B,KAAK,OACLF,KAAK,OACLmC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,UAAC,KAAD,qBAEE,SAAC,KAAD,CACEnC,KAAK,MACLF,KAAK,SACLmC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,SAAC,KAAD,CAAQnC,KAAK,SAAb,2BAIL,E,UC5CY,SAASoC,IACtB,IAAMxC,GAAWC,EAAAA,EAAAA,MAMjB,OAJAwC,EAAAA,EAAAA,YAAU,WACRzC,GAAS0C,EAAAA,EAAAA,MACV,GAAE,CAAC1C,KAGF,UAAC,KAAD,CAAK2C,GAAG,UAAR,WACI,UAAC,KAAD,YACE,SAAC,KAAD,CAASA,GAAG,KAAZ,wBACA,SAAC,EAAD,QAEF,UAAC,KAAD,YACA,SAAC,KAAD,CAASA,GAAG,KAAZ,uBAGE,SAACrB,EAAD,KACA,SAAC,EAAD,QAGJ,SAAC,KAAD,MAIL,C","sources":["components/Contact/Contact.jsx","redux/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/ContactsForm/ContactsForm.jsx","pages/Contacts.js"],"sourcesContent":["// import { Button, Span, ContactBox } from \"./Contact.styled\"\nimport { deleteContact } from \"../../redux/operations\"\nimport { useDispatch } from \"react-redux\";\nimport { Button, Box, Text } from \"@chakra-ui/react\";\n\nconst Contact = ({contact}) => {\n    const dispatch = useDispatch();\n    const handleDelete = () => dispatch(deleteContact(contact.id));\n    return (\n        <Box>\n            <Text>{contact.name}: {contact.number}</Text>\n            <Button type=\"button\" onClick={handleDelete}>Delete</Button> \n        </Box>\n    )\n}\n\nexport default Contact","// import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter\n\n// export const selectVisibleContacts = createSelector(\n//   [selectContacts, selectFilter],\n//   (contacts, filterStatus) => {\n//     if (filterStatus === '') {\n//       return contacts\n//     } else {\n//        return contacts.filter(({ name }) =>\n//       name.includes(filterStatus)\n//     );\n//     }\n//   }\n// );\n","import React from \"react\";\n// import { ContactsUl, ContactItem } from \"./ContactList.styled\"\nimport Contact from \"../Contact/Contact\"\nimport { selectContacts, selectFilter } from '../../redux/selectors'\nimport { useSelector } from \"react-redux\"\nimport { ListItem, UnorderedList } from '@chakra-ui/react'\n\n\n\nfunction ContactList() {\n    const contacts = useSelector(selectContacts)\n    const filterStatus = useSelector(selectFilter)\n    // const visible = useSelector(selectVisibleContacts)\n    const visibleContacts = contacts.filter((contact) => contact.name.toLowerCase().includes(filterStatus.toLowerCase()))\n    console.log(visibleContacts)\n\n    return (\n            <UnorderedList>\n                {visibleContacts.map(contact  => (\n                <ListItem key={contact.id}>\n                    <Contact contact={contact}  />    \n                </ListItem>    \n                ))}\n            </UnorderedList>\n        )\n    \n\n}\n\n\nexport default ContactList","import React from \"react\";\n// import { Label } from \"./Filter.styled\"\n// import { Input } from \"../ContactsForm/ContactForm.styled\"\nimport { useDispatch } from \"react-redux\"\nimport { setFilter } from \"../../redux/filterSlice\"\nimport { FormLabel, Input } from \"@chakra-ui/react\";\n\n\nexport const Filter = () => {\n    const dispatch = useDispatch()\n        \n    const filterChangeHandler = (event) => {\n        dispatch(setFilter(event.target.value))\n    }\n\n\n    return <FormLabel>\n        Find contacts by name\n        <Input\n            type=\"text\"\n            name=\"filter\"\n            onChange={filterChangeHandler}\n        />\n        </FormLabel>\n}\n\n","\nimport React from \"react\";\n// import { Form, Label, Input, Button } from \"./ContactForm.styled\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { addContact } from \"../../redux/operations\"\nimport { selectContacts } from \"redux/selectors\";\nimport { Button, Input, FormLabel, FormControl } from \"@chakra-ui/react\";\n\nconst ContactsForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts)\n\n  \n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const form = event.target;\n    const newContact = {\n      name: form.elements.name.value,\n      number: form.elements.number.value\n    }\n    \n    if (contacts.find(contact => contact.name === newContact.name)) {\n      alert(`${newContact.name} is already in contacts`);\n      form.reset();\n      return;\n    }\n    \n      dispatch(addContact(newContact))\n      form.reset();\n      \n    }\n      \n    return (\n      <FormControl onSubmit={handleSubmit}>\n        <FormLabel>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </FormLabel>\n        <FormLabel>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </FormLabel>\n        <Button type=\"submit\">Add contact</Button>\n      </FormControl>\n    )\n    \n  }\n\nexport default ContactsForm\n\n","import  ContactList  from \"../components/ContactList/ContactList\"\nimport { Filter } from \"../components/Filter/Filter\"\nimport ContactsForm from \"../components/ContactsForm/ContactsForm\"\n// import { Section, Container, Title } from \"../components/section.styled\"\nimport { Outlet } from 'react-router-dom'\nimport { useDispatch } from \"react-redux\"\nimport { useEffect } from \"react\"\nimport { fetchContacts } from \"redux/operations\"\nimport {Box, Heading} from \"@chakra-ui/react\"\n// import { useSelector } from 'react-redux';\n// import { authSelectors } from 'redux/auth';\n\n\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n// const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\n  return (\n    <Box as=\"section\">\n        <Box>\n          <Heading as=\"h2\">Phonebook</Heading>\n          <ContactsForm/>\n        </Box>\n        <Box>\n        <Heading as=\"h2\">Contacts</Heading>\n          {/* {isLoading && <p>Loading tasks...</p>} */}\n          {/* {error && <p>{error}</p>} */}\n          <Filter />\n          <ContactList />\n          \n      </Box>\n      <Outlet />\n    </Box>\n    \n  )\n}\n\n"],"names":["contact","dispatch","useDispatch","name","number","type","onClick","deleteContact","id","selectContacts","state","contacts","items","selectFilter","filter","useSelector","filterStatus","visibleContacts","toLowerCase","includes","console","log","map","Filter","onChange","event","setFilter","target","value","onSubmit","preventDefault","form","newContact","elements","find","alert","reset","addContact","pattern","title","required","Contacts","useEffect","fetchContacts","as"],"sourceRoot":""}